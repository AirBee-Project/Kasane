{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Packet",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "commands": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/Command"
      }
    },
    "user": {
      "type": "string"
    }
  },
  "additionalProperties": false,
  "required": [
    "user",
    "commands",
    "$schema"
  ],
  "$defs": {
    "AddKeyInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/$defs/KeyType"
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "AddKeys": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/AddKeyInfo"
          }
        },
        "spacename": {
          "type": "string"
        }
      },
      "required": [
        "spacename",
        "keys"
      ]
    },
    "AddSpace": {
      "type": "object",
      "properties": {
        "spacename": {
          "type": "string"
        }
      },
      "required": [
        "spacename"
      ]
    },
    "AddUser": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "required": [
        "username",
        "password"
      ]
    },
    "Command": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "ShowSpaces"
          ]
        },
        {
          "type": "object",
          "properties": {
            "AddSpace": {
              "$ref": "#/$defs/AddSpace"
            }
          },
          "additionalProperties": false,
          "required": [
            "AddSpace"
          ]
        },
        {
          "type": "object",
          "properties": {
            "DeleteSpace": {
              "$ref": "#/$defs/DeleteSpace"
            }
          },
          "additionalProperties": false,
          "required": [
            "DeleteSpace"
          ]
        },
        {
          "type": "object",
          "properties": {
            "AddKeys": {
              "$ref": "#/$defs/AddKeys"
            }
          },
          "additionalProperties": false,
          "required": [
            "AddKeys"
          ]
        },
        {
          "type": "object",
          "properties": {
            "DeleteKeys": {
              "$ref": "#/$defs/DeleteKeys"
            }
          },
          "additionalProperties": false,
          "required": [
            "DeleteKeys"
          ]
        },
        {
          "type": "object",
          "properties": {
            "PutValue": {
              "$ref": "#/$defs/PutValue"
            }
          },
          "additionalProperties": false,
          "required": [
            "PutValue"
          ]
        },
        {
          "type": "object",
          "properties": {
            "SetValue": {
              "$ref": "#/$defs/SetValue"
            }
          },
          "additionalProperties": false,
          "required": [
            "SetValue"
          ]
        },
        {
          "type": "object",
          "properties": {
            "DeleteValue": {
              "$ref": "#/$defs/DeleteValue"
            }
          },
          "additionalProperties": false,
          "required": [
            "DeleteValue"
          ]
        },
        {
          "type": "object",
          "properties": {
            "Transaction": {
              "$ref": "#/$defs/Transaction"
            }
          },
          "additionalProperties": false,
          "required": [
            "Transaction"
          ]
        },
        {
          "type": "object",
          "properties": {
            "Showkeys": {
              "$ref": "#/$defs/Showkeys"
            }
          },
          "additionalProperties": false,
          "required": [
            "Showkeys"
          ]
        },
        {
          "type": "object",
          "properties": {
            "AddUser": {
              "$ref": "#/$defs/AddUser"
            }
          },
          "additionalProperties": false,
          "required": [
            "AddUser"
          ]
        },
        {
          "type": "object",
          "properties": {
            "DeleteUser": {
              "$ref": "#/$defs/DeleteUser"
            }
          },
          "additionalProperties": false,
          "required": [
            "DeleteUser"
          ]
        }
      ]
    },
    "DeleteKeyInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "DeleteKeys": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/DeleteKeyInfo"
          }
        },
        "spacename": {
          "type": "string"
        }
      },
      "required": [
        "spacename",
        "keys"
      ]
    },
    "DeleteSpace": {
      "type": "object",
      "properties": {
        "spacename": {
          "type": "string"
        }
      },
      "required": [
        "spacename"
      ]
    },
    "DeleteUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        }
      },
      "required": [
        "username"
      ]
    },
    "DeleteValue": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SelectKeyInfo"
          }
        },
        "select": {
          "$ref": "#/$defs/Select"
        }
      },
      "required": [
        "select",
        "keys"
      ]
    },
    "DimensionRange": {
      "description": "Represents a value for a single dimension (F, X, Y, or T) in a SpaceTimeId.\n\nThis enum can represent a single value, a range, or an Any value,\ncorresponding to the extended notation of the spatial ID.",
      "oneOf": [
        {
          "description": "A closed range with a start and end value (e.g., 5:10).",
          "type": "object",
          "properties": {
            "LimitRange": {
              "type": "array",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "type": "integer",
                  "format": "int64"
                }
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "LimitRange"
          ]
        },
        {
          "description": "An unlimited range up to an end value (e.g., -:10).",
          "type": "object",
          "properties": {
            "BeforeUnLimitRange": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false,
          "required": [
            "BeforeUnLimitRange"
          ]
        },
        {
          "description": "An unlimited range from a start value onwards (e.g., 5:-).",
          "type": "object",
          "properties": {
            "AfterUnLimitRange": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false,
          "required": [
            "AfterUnLimitRange"
          ]
        },
        {
          "description": "A single, discrete value.",
          "type": "object",
          "properties": {
            "Single": {
              "type": "integer",
              "format": "int64"
            }
          },
          "additionalProperties": false,
          "required": [
            "Single"
          ]
        },
        {
          "description": "An Any value, indicating it applies to all possible values in this dimension (e.g., -).",
          "type": "string",
          "const": "Any"
        }
      ]
    },
    "DimensionRange2": {
      "description": "Represents a value for a single dimension (F, X, Y, or T) in a SpaceTimeId.\n\nThis enum can represent a single value, a range, or an Any value,\ncorresponding to the extended notation of the spatial ID.",
      "oneOf": [
        {
          "description": "A closed range with a start and end value (e.g., 5:10).",
          "type": "object",
          "properties": {
            "LimitRange": {
              "type": "array",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0
                },
                {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0
                }
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "LimitRange"
          ]
        },
        {
          "description": "An unlimited range up to an end value (e.g., -:10).",
          "type": "object",
          "properties": {
            "BeforeUnLimitRange": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          "additionalProperties": false,
          "required": [
            "BeforeUnLimitRange"
          ]
        },
        {
          "description": "An unlimited range from a start value onwards (e.g., 5:-).",
          "type": "object",
          "properties": {
            "AfterUnLimitRange": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          "additionalProperties": false,
          "required": [
            "AfterUnLimitRange"
          ]
        },
        {
          "description": "A single, discrete value.",
          "type": "object",
          "properties": {
            "Single": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0
            }
          },
          "additionalProperties": false,
          "required": [
            "Single"
          ]
        },
        {
          "description": "An Any value, indicating it applies to all possible values in this dimension (e.g., -).",
          "type": "string",
          "const": "Any"
        }
      ]
    },
    "DimensionRange3": {
      "description": "Represents a value for a single dimension (F, X, Y, or T) in a SpaceTimeId.\n\nThis enum can represent a single value, a range, or an Any value,\ncorresponding to the extended notation of the spatial ID.",
      "oneOf": [
        {
          "description": "A closed range with a start and end value (e.g., 5:10).",
          "type": "object",
          "properties": {
            "LimitRange": {
              "type": "array",
              "maxItems": 2,
              "minItems": 2,
              "prefixItems": [
                {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0
                },
                {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0
                }
              ]
            }
          },
          "additionalProperties": false,
          "required": [
            "LimitRange"
          ]
        },
        {
          "description": "An unlimited range up to an end value (e.g., -:10).",
          "type": "object",
          "properties": {
            "BeforeUnLimitRange": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "additionalProperties": false,
          "required": [
            "BeforeUnLimitRange"
          ]
        },
        {
          "description": "An unlimited range from a start value onwards (e.g., 5:-).",
          "type": "object",
          "properties": {
            "AfterUnLimitRange": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "additionalProperties": false,
          "required": [
            "AfterUnLimitRange"
          ]
        },
        {
          "description": "A single, discrete value.",
          "type": "object",
          "properties": {
            "Single": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0
            }
          },
          "additionalProperties": false,
          "required": [
            "Single"
          ]
        },
        {
          "description": "An Any value, indicating it applies to all possible values in this dimension (e.g., -).",
          "type": "string",
          "const": "Any"
        }
      ]
    },
    "Function": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "Line": {
              "$ref": "#/$defs/Line"
            }
          },
          "additionalProperties": false,
          "required": [
            "Line"
          ]
        }
      ]
    },
    "KeyType": {
      "type": "string",
      "enum": [
        "Int",
        "Boolean",
        "Text"
      ]
    },
    "Line": {
      "type": "object",
      "properties": {
        "end_x": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "end_y": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "end_z": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "start_x": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "start_y": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "start_z": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "zoom": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        }
      },
      "required": [
        "start_x",
        "start_y",
        "start_z",
        "end_x",
        "end_y",
        "end_z",
        "zoom"
      ]
    },
    "Prefix": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "AND": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Select"
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "AND"
          ]
        },
        {
          "type": "object",
          "properties": {
            "OR": {
              "type": "array",
              "items": {
                "$ref": "#/$defs/Select"
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "OR"
          ]
        },
        {
          "type": "object",
          "properties": {
            "NOT": {
              "$ref": "#/$defs/Select"
            }
          },
          "additionalProperties": false,
          "required": [
            "NOT"
          ]
        }
      ]
    },
    "PutValue": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SelectKeyInfo"
          }
        },
        "select": {
          "$ref": "#/$defs/Select"
        }
      },
      "required": [
        "select",
        "keys"
      ]
    },
    "Select": {
      "oneOf": [
        {
          "type": "object",
          "properties": {
            "Function": {
              "$ref": "#/$defs/Function"
            }
          },
          "additionalProperties": false,
          "required": [
            "Function"
          ]
        },
        {
          "type": "object",
          "properties": {
            "Prefix": {
              "$ref": "#/$defs/Prefix"
            }
          },
          "additionalProperties": false,
          "required": [
            "Prefix"
          ]
        },
        {
          "type": "object",
          "properties": {
            "SpaceTimeIdSet": {
              "$ref": "#/$defs/SpaceTimeIdSet"
            }
          },
          "additionalProperties": false,
          "required": [
            "SpaceTimeIdSet"
          ]
        }
      ]
    },
    "SelectKeyInfo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "SetValue": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SelectKeyInfo"
          }
        },
        "select": {
          "$ref": "#/$defs/Select"
        }
      },
      "required": [
        "select",
        "keys"
      ]
    },
    "Showkeys": {
      "type": "object",
      "properties": {
        "spacename": {
          "type": "string"
        }
      },
      "required": [
        "spacename"
      ]
    },
    "SpaceTimeId": {
      "description": "* z: The zoom level, a u16 value. It defines the coordinate space boundaries.\n* f: The value for the F (vertical) dimension as a DimensionRange<i64>.\n* x: The value for the X dimension as a DimensionRange<u64>.\n* y: The value for the Y dimension as a DimensionRange<u64>.\n* i: The time interval in seconds, a u32 value.\n* t: The time index value as a DimensionRange<u32>.\n\n# Normalization Rules\n\nThe input `DimensionRange` values are normalized during validation inside `SpaceTimeId::new`\naccording to the following rules:\n\n## `DimensionRange::Single`\n- No normalization applied (used as-is).\n\n## `DimensionRange::LimitRange(start, end)`\n- If `start == end`: converted to `Single(start)`.\n- If the range spans the entire valid domain:\n  - For x/y: `0..=2^z - 1`\n  - For f: `-2^z..=2^z - 1`\n  → converted to `Any`.\n- If `start == 0`: converted to `BeforeUnLimitRange(end)`.\n- If `end == max`: converted to `AfterUnLimitRange(start)`.\n\n## `DimensionRange::AfterUnLimitRange(start)`\n- If `start == 0` (for x/y) or `start == min_f` (for f): converted to `Any`.\n- If `start == max` (for x/y only): converted to `Single(max)`.\n\n## `DimensionRange::BeforeUnLimitRange(end)`\n- If `end == max` (for x/y) or `end == max_f` (for f): converted to `Any`.\n- If `end == 0` (for x/y) or `end == min_f` (for f): converted to `Single(end)`.\n\n## `DimensionRange::Any`\n- No normalization applied (used as-is).\n\n## Special case for time dimension `t`\n- If `i == 0`, then `t` **must** be `Any`. Otherwise, an error is returned.",
      "type": "object",
      "properties": {
        "f": {
          "$ref": "#/$defs/DimensionRange"
        },
        "i": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0
        },
        "t": {
          "$ref": "#/$defs/DimensionRange3"
        },
        "x": {
          "$ref": "#/$defs/DimensionRange2"
        },
        "y": {
          "$ref": "#/$defs/DimensionRange2"
        },
        "z": {
          "type": "integer",
          "format": "uint16",
          "maximum": 65535,
          "minimum": 0
        }
      },
      "required": [
        "z",
        "f",
        "x",
        "y",
        "i",
        "t"
      ]
    },
    "SpaceTimeIdSet": {
      "description": "This type represents a set of `SpaceTimeId` elements.\n\nWhen a new `SpaceTimeId` is added, any overlapping ranges with existing elements\nwill be subtracted from the new one to ensure that the ranges represented by IDs\nin the set remain disjoint (i.e., no overlap between any two entries).\n\nAs a result, each distinct region in the physical space-time domain is guaranteed\nto be represented by *only one* `SpaceTimeId` within the set.\nThis ensures unambiguous mapping between a spatial-temporal region and its identifier.",
      "type": "object",
      "properties": {
        "inner": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/SpaceTimeId"
          }
        }
      },
      "required": [
        "inner"
      ]
    },
    "Transaction": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/$defs/TransactionAction"
        }
      },
      "required": [
        "action"
      ]
    },
    "TransactionAction": {
      "type": "string",
      "enum": [
        "Start",
        "Commit",
        "Rollback"
      ]
    }
  }
}